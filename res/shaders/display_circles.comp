#version 430
layout(local_size_x = 16, local_size_y = 16) in;
layout(rgba32f, binding = 0) uniform image2D img_out;

struct Pix {
	vec3 col;
	float tot;
};

layout(binding = 0) buffer screen_data {
	Pix buf[];
};

void main() {
	uint idx = gl_GlobalInvocationID.y * 2560 + gl_GlobalInvocationID.x;
	float curr_val = buf[idx].tot;
	vec3 curr_col = buf[idx].col;
	float best = 0.02;
	float decided_val = 0;
	float default_val = 0.1;
	if (curr_val < 1 - best) {
		decided_val = smoothstep(0, default_val, curr_val);
		decided_val = default_val;
	}
	else if (curr_val <= 1) {
		//decided_val = smoothstep(default_val, 1.0, 1.0 - abs(curr_val - 1.0) * (1.0 / best));
		decided_val = default_val + (1 - abs(curr_val - 1.0) * (1.0 / best)) * (1-default_val);
		decided_val = default_val + (1 - abs((curr_val - 1) / best)) * (1-default_val);
	}
	else if (curr_val <= 1 + best) {
		decided_val = (1 - abs((curr_val - 1) / best));
	}
	else {
		//decided_val = ((curr_val - (1+best)) / 10);
	}
	//decided_val = default_val;

/*

	if (1 - best <= curr_val && curr_val <= 1 + best) {
		decided_val = default_val + (1 - abs((curr_val - 1) / best)) * (1-default_val);
	}
	else if (curr_val <= 1) {
		decided_val = default_val;
	}
	else if (curr_val >= 1) {
		//decided_val = 1 / curr_val;
	}
*/
	vec4 pixel = vec4(vec3(0.0, 0.0, 0.0) + (decided_val * (curr_col / curr_val)), 1);

	//pixel = vec4(curr_val / 1, 0, 0, 1);
	//
	// interesting stuff happens here later
	//

	// output to a specific pixel in the image
	imageStore(img_out, ivec2(gl_GlobalInvocationID.xy), pixel);
}

