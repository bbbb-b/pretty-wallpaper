#version 430
layout(local_size_x = 16, local_size_y = 16) in;
//layout(rgba32f, binding = 0) uniform image2D img_out;
//uniform float u_time;
uniform float circle_x;
uniform float circle_y;
uniform float circle_size;
uniform vec3 circle_color;
#define M_PI 3.1415926535897932384626433832795
uniform float frequent_rand1;
uniform float frequent_rand2;
uniform float interpolate_rand; // value in [0, 1] based on the current time between random values

struct Pix {
	vec3 col;
	float tot;
};

layout(binding = 0) buffer screen_data {
	Pix buf[];
};

float rand(float v1, float v2){
    return fract(sin(dot(vec2(v1, v2), vec2(12.9898, 78.233))) * 43758.5453);
}

float do_rand_interpolate(float val, float md) {
	float r1 = mod(rand(val, frequent_rand1), md);
	float r2 = mod(rand(val, frequent_rand2), md);
	return r1 + (r2 - r1) * interpolate_rand;
}

void main() {
	// base pixel colour for image
	vec4 pixel = vec4(1.0, 1.0, 1.0, 1.0);
	vec2 mid = vec2(circle_x, circle_y);
	//vec2 curr = 
	pixel = vec4(gl_GlobalInvocationID.xy, 0, 1);
	// get index in global work group i.e x,y position
	float dist = distance(mid, gl_GlobalInvocationID.xy);
	uint idx = gl_GlobalInvocationID.y * 2560 + gl_GlobalInvocationID.x;
	vec2 angle = gl_GlobalInvocationID.xy - mid;
	//dist = distance(mid, vec2(gl_LocalInvocationIndex, 0));
	float pos_on_circle = (atan(angle.x / angle.y) * 4 + M_PI) / (M_PI * 2);
	float rand_mul = 0.00;
	float rand_full_mul = 0.0;
	float circle_mul = 0.10;
	//float rand_
	//float r1 = mod(rand(floor(pos_on_circle * 100), frequent_rand1), 1);
	//float r2 = mod(rand(floor(pos_on_circle * 100), frequent_rand2), 1);
	float tot_mul = (rand_mul * do_rand_interpolate(floor(pos_on_circle * 50), 1)) + 
	//float tot_mul = (rand_mul * (r1 + (r2 - r1) * interpolate_rand)) + 
		(rand_full_mul * do_rand_interpolate(circle_size, 1)) +
		(circle_mul * sin(pos_on_circle * M_PI * 2 * ceil(circle_size / 8))) +
		(1-(rand_mul + circle_mul + rand_full_mul));
	float tot_add = (circle_size / dist) * tot_mul;
	vec3 col_add = circle_color * tot_add;
	float curr_val = buf[idx].tot + tot_add;
	vec3 curr_col = buf[idx].col + col_add;
	//curr_val = dist / circle_size;
	buf[idx].tot = curr_val;
	buf[idx].col = curr_col;
	//curr_val = buf[gl_LocalInvocationIndex];
	/*
	float best = 0.1;
	float decided_val = 0;
	float default_val = 0.1;
	if (1 - best <= curr_val && curr_val <= 1 + best) {
		decided_val = default_val + (1 - abs((curr_val - 1) / best)) * (1-default_val);
		//pixel = vec4(1, 1, 1, 1);
	}
	else if (curr_val <= 1) {
		decided_val = default_val;
	}
	else if (curr_val >= 1) {
		//decided_val = 1 / curr_val;
	}
	pixel = vec4(vec3(0.0, 0.0, 0.0) + (decided_val * (curr_col / curr_val)), 1);

	//pixel = vec4(curr_val / 1, 0, 0, 1);
	//
	// interesting stuff happens here later
	//

	// output to a specific pixel in the image
	imageStore(img_out, ivec2(gl_GlobalInvocationID.xy), pixel);
	*/
}
